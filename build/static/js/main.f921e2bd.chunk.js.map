{"version":3,"sources":["edit.js","App.js","serviceWorker.js","index.js"],"names":["PostCreate","props","Create","SimpleForm","TextInput","source","PasswordInput","BooleanInput","PostEdit","Edit","disabled","label","dataProvider","jsonServerProvider","App","Admin","Resource","name","list","ListGuesser","edit","create","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0UAKaA,EAAa,SAACC,GAAD,OACtB,gBAACC,EAAA,EAAWD,EACR,gBAACE,EAAA,EAAD,KAGI,gBAACC,EAAA,EAAD,CAAWC,OAAO,aAClB,gBAACD,EAAA,EAAD,CAAWC,OAAO,WAClB,gBAACC,EAAA,EAAD,CAAeD,OAAO,aACtB,gBAACD,EAAA,EAAD,CAAWC,OAAO,aAClB,gBAACE,EAAA,EAAD,CAAcF,OAAO,gBACrB,gBAACE,EAAA,EAAD,CAAcF,OAAO,cACrB,gBAAC,IAAD,CAAgBA,OAAO,mBAKtBG,EAAW,SAACP,GAAD,OACpB,gBAACQ,EAAA,EAASR,EACE,gBAACE,EAAA,EAAD,KAEJ,gBAACC,EAAA,EAAD,CAAWM,UAAQ,EAACC,MAAM,KAAKN,OAAO,OACtC,gBAACD,EAAA,EAAD,CAAWC,OAAO,aAClB,gBAAC,IAAD,CAAgBA,OAAO,gBACvB,gBAACE,EAAA,EAAD,CAAcF,OAAO,iBCtB3BO,EAAeC,YAAmB,+BAWzBC,EARH,kBACN,gBAACC,EAAA,EAAD,CAAOH,aAAcA,GACjB,gBAACI,EAAA,EAAD,CAAUC,KAAK,YAAYC,KAAMC,IAAaC,KAAMZ,EAAUa,OAAQrB,IACtE,gBAACgB,EAAA,EAAD,CAAUC,KAAK,QAAQC,KAAMC,MAC7B,gBAACH,EAAA,EAAD,CAAUC,KAAK,SAASC,KAAMC,QCDpBG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f921e2bd.chunk.js","sourcesContent":["// in src/posts.js\nimport * as React from \"react\";\nimport { Create, Edit, SimpleForm, TextInput, DateInput, ReferenceManyField, Datagrid, TextField, PasswordInput, LongTextInput , EditButton , BooleanInput } from 'react-admin';\nimport RichTextInput from 'ra-input-rich-text';\n\nexport const PostCreate = (props) => (\n    <Create {...props}>\n        <SimpleForm>\n                    \n       \n            <TextInput source=\"fullname\" />\n            <TextInput source=\"mobile\" />\n            <PasswordInput source=\"password\"/>\n            <TextInput source=\"username\" />\n            <BooleanInput source=\"is_provider\" />\n            <BooleanInput source=\"is_active\" />\n            <RichTextInput  source=\"description\" />\n        </SimpleForm>\n    </Create>\n);\n\nexport const PostEdit = (props) => (\n    <Edit {...props}>\n                <SimpleForm>\n                    \n            <TextInput disabled label=\"Id\" source=\"id\" />\n            <TextInput source=\"fullname\" />\n            <RichTextInput  source=\"description\" />\n            <BooleanInput source=\"is_active\"/>\n        \n        </SimpleForm>\n    </Edit>\n);","import * as React from \"react\";\n\nimport jsonServerProvider from 'ra-data-json-server';\nimport { Admin, Resource, ListGuesser } from 'react-admin';\nimport { PostCreate, PostEdit } from './edit';\n\nconst dataProvider = jsonServerProvider('http://localhost:6662/admin');\n// const App = () => <Admin dataProvider={dataProvider} />;\n\nconst App = () => (\n      <Admin dataProvider={dataProvider}>\n          <Resource name=\"providers\" list={ListGuesser} edit={PostEdit} create={PostCreate}/>\n          <Resource name=\"count\" list={ListGuesser} />\n          <Resource name=\"orders\" list={ListGuesser} />\n      </Admin>\n  );\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}